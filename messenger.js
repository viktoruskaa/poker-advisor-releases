const axios = require('axios');

class Messenger {
  constructor(telegramConfig, settings, eventBus = null, configPath = '') {
    this.bus = eventBus;
    this.settings = settings;
    this.lastRecommendation = null;
    this.configPath = configPath;

    if (!telegramConfig.bot_token || telegramConfig.bot_token.includes("YOUR_TELEGRAM")) {
        console.error("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π!");
        this.apiUrl = null;
    } else {
        this.apiUrl = `https://api.telegram.org/bot${telegramConfig.bot_token}`;
        if (this.bus) this.startListening();
    }
    this.chatId = telegramConfig.chat_id.includes("YOUR_TELEGRAM") ? null : telegramConfig.chat_id;
  }

  setLastRecommendation(rec) { this.lastRecommendation = rec; }
  getLastRecommendation() { return this.lastRecommendation; }

  startListening() {
    let offset = 0;
    setInterval(async () => {
        if (!this.apiUrl) return;
        try {
            const response = await axios.post(`${this.apiUrl}/getUpdates`, { offset: offset, timeout: 10 });
            const updates = response.data.result;
            if (updates.length > 0) {
                offset = updates[updates.length - 1].update_id + 1;
                this.handleUpdates(updates);
            }
        } catch (error) {
            if (error.code !== 'ECONNABORTED') console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram:', error.message);
        }
    }, 1000);
  }

  handleUpdates(updates) {
    for (const update of updates) {
        if (update.message && update.message.text) {
            const text = update.message.text;
            const chatId = update.message.chat.id;
            const firstName = update.message.from.first_name;

            if (text.startsWith('/start')) {
                const welcomeMessage = this.getWelcomeMessage(chatId, firstName);
                this.sendDirectMessage(chatId, welcomeMessage);
            } else if (text.startsWith('/') && this.bus) {
                const [command, ...args] = text.split(' ');
                this.bus.emit('user-command', { type: command, args: args.join(' ') });
            }
        }
    }
  }

  getWelcomeMessage(chatId, firstName) {
    return `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Poker Advisor.

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!

**–®–ê–ì 1: –ù–∞–π–¥–∏—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**
–û–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∑–¥–µ—Å—å:
\`${this.configPath}\`
(–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞)

**–®–ê–ì 2: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª**
–û—Ç–∫—Ä–æ–π—Ç–µ \`config.json\` –≤ –ë–ª–æ–∫–Ω–æ—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:

1.  –í–∞—à \`chat_id\`: \`${chatId}\`
2.  –í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –ø–æ–∫–µ—Ä–µ: \`–í–∞—à_–ù–∏–∫_–í_–ò–≥—Ä–µ\`

–ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
\`\`\`json
"chat_id": "${chatId}",
"my_player_name": "PokerShark123"
\`\`\`

**–®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**
–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–æ–π—Ç–µ –∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ "Desktop Service Utility". –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –£–¥–∞—á–∏!`;
  }

  async sendDirectMessage(chatId, text) {
      if (!this.apiUrl) return;
      try {
          await axios.post(`${this.apiUrl}/sendMessage`, { chat_id: chatId, text: text, parse_mode: 'Markdown' });
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.response ? error.response.data : error.message);
      }
  }

  async sendMessage(rec) {
    if (!this.apiUrl || !this.chatId) return;
    let messageText = rec.action ? `–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ${rec.action}${rec.amount ? ` (${rec.amount})` : ''}${this.settings.training_mode && rec.reason ? `\n–ü—Ä–∏—á–∏–Ω–∞: ${rec.reason}` : ''}` : rec.text;
    const delay = Math.floor(Math.random() * (this.settings.max_delay_ms - this.settings.min_delay_ms + 1)) + this.settings.min_delay_ms;

    return new Promise(resolve => {
        setTimeout(() => {
            axios.post(`${this.apiUrl}/sendMessage`, { chat_id: this.chatId, text: messageText })
              .catch(error => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.response ? error.response.data : error.message))
              .finally(resolve);
        }, delay);
    });
  }
}

module.exports = Messenger;